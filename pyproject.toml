[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "unified-mcp-system"
version = "0.1.0"
description = "Unified MCP System: Production-ready MCP server with OpenAI-compatible intermediary"
readme = "README.md"
license = { text = "MIT" }
authors = [
    { name = "GrapheneAffiliate", email = "your-email@example.com" }
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["mcp", "model-context-protocol", "ai", "llm", "openai", "langchain", "fastapi"]
requires-python = ">=3.11"
dependencies = [
    # Core MCP and FastAPI
    "mcp>=1.0.0",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    
    # LangChain Integration
    "langchain>=0.1.0",
    "langchain-openai>=0.0.5",
    "langchain-community>=0.0.10",
    
    # OpenAI Compatibility
    "openai>=1.12.0",
    "tiktoken>=0.5.0",
    
    # Database and Storage
    "sqlmodel>=0.0.14",
    "redis>=5.0.0",
    
    # HTTP and Networking
    "httpx>=0.25.0",
    "aiohttp>=3.9.0",
    "websockets>=12.0",
    "langchain-mcp-adapters>=0.1.5",
    
    # Security and Authentication
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    
    # Observability and Monitoring
    "prometheus-client>=0.19.0",
    "structlog>=23.2.0",
    "rich>=13.7.0",
    
    # Utilities
    "python-dotenv>=1.0.0",
    "typer>=0.9.0",
    "click>=8.1.0",
    "pyyaml>=6.0.1",
    "jinja2>=3.1.0",
    
    # Development and Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "httpx>=0.25.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.6",
    "mypy>=1.7.0",
    "black>=23.11.0",
    "isort>=5.12.0",
    "pre-commit>=3.5.0",
    "pytest-xdist>=3.3.1",
    "coverage[toml]>=7.3.0",
    "mcp[cli]>=0.4.0",
    "langchain-mcp-adapters>=0.1.5",
    "httpx>=0.26.0",
    "jsonschema>=4.22.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "mkdocstrings[python]>=0.24.0",
]

[project.urls]
Homepage = "https://github.com/grapheneaffiliate/unified-mcp-system"
Documentation = "https://github.com/grapheneaffiliate/unified-mcp-system#readme"
Repository = "https://github.com/grapheneaffiliate/unified-mcp-system"
Issues = "https://github.com/grapheneaffiliate/unified-mcp-system/issues"

[project.scripts]
unified-mcp = "unified_mcp_system.cli:main"
mcp-server = "unified_mcp_system.mcp_agent.cli:main"
lc-mcp-app = "unified_mcp_system.lc_mcp_app.cli:main"

[tool.hatch.build.targets.wheel]
packages = ["unified_mcp_system", "lc_mcp_app", "mcp_agent"]

[tool.ruff]
target-version = "py311"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/**/*" = ["S101", "D"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "mcp.*",
    "langchain.*",
    "openai.*",
    "redis.*",
    "prometheus_client.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
markers = [
    "integration: mark a test as integration",
    "slow: mark a test as slow",
    "asyncio: mark a test as asyncio-based",
    "unit: mark a test as unit",
]

testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config"
]

[tool.coverage.run]
source = ["unified_mcp_system", "lc_mcp_app", "mcp_agent"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
