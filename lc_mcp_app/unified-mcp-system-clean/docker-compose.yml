version: '3.8'

services:
  mcp-server:
    build: .
    command: ["python", "-m", "mcp_agent.server"]
    user: "10001:10001"
    read_only: true
    tmpfs: ["/tmp"]
    ports:
      - "8000:8000"
    environment:
      - MCP_SERVER_HOST=0.0.0.0
      - MCP_SERVER_PORT=8000
      - MCP_LOG_LEVEL=INFO
      - MCP_DATABASE_URL=sqlite:///./mcp_agent.db
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    env_file:
      - .env
    volumes:
      - ./data:/app/data:rw
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8000/health"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    networks:
      - mcp-network
    depends_on:
      redis:
        condition: service_healthy
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  lc-mcp-app:
    build: .
    command: ["python", "-m", "lc_mcp_app.server"]
    user: "10001:10001"
    read_only: true
    tmpfs: ["/tmp"]
    ports:
      - "8001:8001"
    environment:
      - LC_APP_HOST=0.0.0.0
      - LC_APP_PORT=8001
      - LC_APP_LOG_LEVEL=INFO
      - MCP_SERVER_URL=http://mcp-server:8000
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    env_file:
      - .env
    volumes:
      - ./logs:/app/logs:rw
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-fsS", "http://localhost:8001/health"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    networks:
      - mcp-network
    depends_on:
      mcp-server:
        condition: service_healthy
      redis:
        condition: service_healthy
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  redis:
    image: redis:7-alpine
    command: ["redis-server", "--save", "", "--appendonly", "no"]
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 2s
      retries: 10
      start_period: 10s
    networks:
      - mcp-network
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - mcp-network
    profiles:
      - monitoring
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - mcp-network
    profiles:
      - monitoring
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
